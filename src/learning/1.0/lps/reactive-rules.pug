doctype html
html(lang="en")
  - const currentPage = 'learning';
  include ../../../shared/versions.pug
  head
    meta(name="viewport", content="width=device-width, initial-scale=1")
    title Reactive Rules - Learning Resources - lps.js
    include ../../../shared/head-includes.pug
  body
    include ../../../shared/menu.pug
    .container-fluid
      .row
        .col-md-8.col-sm-8.col-lg-6
          include ../header.pug
          h2.display-4 Reactive Rules

          p Reactive rules in LPS have the form of "<code>if <i>antecedent</i> then <i>consequent</i></code>". A rule is said to have fired whenever conditions in its <code><i>antecedent</i></code> are met. When a rule is fired, LPS will attempt to find an instance of its consequent that holds by model generation and <a href="logic-program.html">logic programming</a>.

          p For example, to express a rule that says "if alice asked about weather, then reply my knowledge about the weather":

          pre.ml-3: code asked(alice, weather, T1, T2) -&gt; weather(Status, T2), reply(alice, Status, T2, T3).

          p The predicate <code>asked/4</code> can be an observed event that, when observed, will fire the example rule. <code>weather/2</code> is a fluent for the fact <code>weather/1</code> that indicates the current agent's knowledge about the weather, and <code>reply/4</code> is an action that LPS can select for execution, which pressumbly would reply to alice about the weather.

          p When an instance of <code>asked(alice, weather)</code> is observed at some point in time, the temporal variables <code>T1</code> and <code>T2</code> will be instantiated and a new goal of

          pre.ml-3: code weather(Status, T2), reply(alice, Status, T2, T3)

          p will be created in LPS for some value of <code>T2</code> substituted from the antecedent. LPS will then perform the 3-step goal resolution to try to find a empty goal cluase that represents the successful resolution of the given root goal of the fired rule.

          p Macro actions or composite actions can be defined by logic programming to enable antecedent pattern matching and description of alternative plans in the antecedent.

          p The use of definitions in logic programming can help LPS to recognise the occurance of complex events. At initialisation, LPS will perform a pre-processing step to expand composite actions by their definitions given in the logic program. An example program that demonstrates this pre-processing is given as follows:

          pre.ml-3: code
            | bought(dinner, T1, T2) -&gt;
            |   eat(T2, T3).    % rule
            | bought(dinner, T1, T2) &lt;-
            |   bought(steak, T1, T2).
            | bought(dinner, T1, T2) &lt;-
            |   bought(burger, T1, T2),
            |   bought(fries, T1, T2)

          p The rule pre-processing will generate two new rules from the existing rule, and the previous rule can be discarded:

          pre.ml-3: code
            | bought(steak, T1, T2) -&gt;
            |   eat(T2, T3).    % new rule 1
            | bought(burger, T1, T2),
            |   bought(fries, T1, T2) -&gt;
            |     eat(T2, T3).    % new rule 2

          p The fire simple and recurrent examples demonstrate how logic programming can describe alternative plans for the same goal, allowing a "OR" operation in the LPS semantics. The example of such a use case in the fire simple example is shown below:

          pre.ml-3: code
            | fire(T1) -&gt; deal_with_fire(T1, T2).
            | deal_with_fire(T1, T2) &lt;- eliminate(T1, T2).
            | deal_with_fire(T1, T2) &lt;- escape(T1, T2).

          //- h3 Implicit Temporal Constraint
          //-
          //- p In the sequence of events, the temporal variables in the consequent must always appear greater than those of the antecedent.

    include ../../../shared/scripts.pug
